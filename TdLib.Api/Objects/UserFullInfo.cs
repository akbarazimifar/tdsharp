using System;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Contains full information about a user
        /// </summary>
        public partial class UserFullInfo : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "userFullInfo";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// User profile photo; may be null if empty or unknown. If non-null, then it is the same photo as in user.profile_photo and chat.photo
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("photo")]
            public ChatPhoto Photo { get; set; }

            /// <summary>
            /// True, if the user is blocked by the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_blocked")]
            public bool IsBlocked { get; set; }

            /// <summary>
            /// True, if the user can be called
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_be_called")]
            public bool CanBeCalled { get; set; }

            /// <summary>
            /// True, if a video call can be created with the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("supports_video_calls")]
            public bool SupportsVideoCalls { get; set; }

            /// <summary>
            /// True, if the user can't be called due to their privacy settings
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_private_calls")]
            public bool HasPrivateCalls { get; set; }

            /// <summary>
            /// True, if the user can't be linked in forwarded messages due to their privacy settings
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_private_forwards")]
            public bool HasPrivateForwards { get; set; }

            /// <summary>
            /// True, if voice and video notes can't be sent or forwarded to the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_restricted_voice_and_video_note_messages")]
            public bool HasRestrictedVoiceAndVideoNoteMessages { get; set; }

            /// <summary>
            /// True, if the current user needs to explicitly allow to share their phone number with the user when the method addContact is used
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("need_phone_number_privacy_exception")]
            public bool NeedPhoneNumberPrivacyException { get; set; }

            /// <summary>
            /// A short user bio; may be null for bots
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("bio")]
            public FormattedText Bio { get; set; }

            /// <summary>
            /// The list of available options for gifting Telegram Premium to the user
            /// </summary>
            [JsonProperty("premium_gift_options", ItemConverterType = typeof(Converter))]
            public PremiumPaymentOption[] PremiumGiftOptions { get; set; }

            /// <summary>
            /// Number of group chats where both the other user and the current user are a member; 0 for the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("group_in_common_count")]
            public int GroupInCommonCount { get; set; }

            /// <summary>
            /// For bots, information about the bot; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("bot_info")]
            public BotInfo BotInfo { get; set; }
        }
    }
}